const router = require('express').Router();
const models = require('../../db/models');
const { formatBookingDates, hasNoBookingOverlap } = require('../../utils/booking-dates');

router.get('/current', async (req, res, next) => {
    const user = req.user;
    if (user) {
        const bookings = await models.Booking.findAll({
            where: { userId: user.id },
            include: [
                { model: models.Spot }
            ]
        });
        res.status(200).json({
            Bookings: bookings,
        });
    }
});

// Testing?
router.delete('/spot/:spotId', async (req, res) => {
    const spot = await models.Spot.findByPk(Number(req.params.spotId));
    await spot.destroy();
    res.json({
        message: "Spot deleted",
        Spot: spot
    });
});

// Edit a booking
router.put('/:bookingId', async (req, res, next) => {
    const { startDate:start, endDate:end } = req.body;
    const { startDate, endDate } = formatBookingDates({ start, end });
    const isValidBookingDate = startDate < endDate;
    const booking = await models.Booking.findByPk(req.params.bookingId);
    if (!req.user && req.user.id !== booking.userId) {
        res.status(403).json({
            message: "Cannot change a booking owned by another user!", // (or "Validation error" if generated by Sequelize),
            errors: {
              username: "userId does not match booking ID"
            }
        });
    }
    const isAllowedToBook = hasNoBookingOverlap([booking], startDate, endDate);
    if (!isValidBookingDate || !isAllowedToBook) {
        return res.status(403).json({
            message: "Error can't book"
        });
    }
    if (startDate) {
        booking.startDate = startDate;
    }
    if (endDate) {
        booking.endDate = endDate;
    }
    await booking.save();
    res.status(200).json(booking);
});

// Delete a booking
router.delete('/:bookingId', async (req, res, next) => {
    const booking = await models.Booking.findByPk(req.params.bookingId);
    if (!booking) {
        res.status(404);
        return res.json({
            message: "Booking couldn't be found"
        });
    }
    if (req.user.id !== booking.userId) {
        res.status(403);
        return res.json({
            message: "Cannot change a booking owned by another user!", // (or "Validation error" if generated by Sequelize),
            errors: {
              username: "userId does not match booking ID"
            }
        });
    }
    await booking.destroy();
    return res.status(200).json({
        message: "Successfully deleted"
    });
});
module.exports = router;