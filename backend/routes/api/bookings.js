const router = require('express').Router();
const models = require('../../db/models');
// const { Spot } = require('../../db/models');
router.get('/current', async (req, res, next) => {
    const user = req.user;
    if (user) {
        const bookings = await models.Booking.findAll({
            where: { userId: user.id },
            include: [
                { model: models.Spot }
            ]
        });
        res.status(200).json({
            Bookings: bookings,
        });
    }
});

router.delete('/spot/:spotId', async (req, res) => {
    const spot = await models.Spot.findByPk(Number(req.params.spotId));
    await spot.destroy();
    res.json({
        message: "Spot deleted",
        Spot: spot
    });
});

// Edit a booking
router.put('/:bookingId', async (req, res, next) => {
    const booking = await models.Booking.findByPk(req.params.bookingId);
    if (req.user.id !== booking.userId) {
        res.status(403).json({
            message: "Cannot change a booking owned by another user!", // (or "Validation error" if generated by Sequelize),
            errors: {
              username: "userId does not match booking ID"
            }
        });
    }
    if (user.id === booking.userId) {
        const { startDate, endDate } = req.body;
        if (startDate) {
            booking.startDate = new Date(startDate + 'T15:00:00');
        }
        if (endDate) {
            booking.endDate = new Date(endDate + 'T11:00:00');
        }
        // for (const [k, v] of Object.entries({ startDate, endDate })) {
        //     if (v) {
        //         booking[k] = v;
        //     }
        // }
        await booking.save();
        res.status(200).json(booking);
    }
});

// Delete a booking
router.delete('/:bookingId', async (req, res, next) => {
    const booking = await models.Booking.findByPk(req.params.bookingId);
    if (!booking) {
        res.status(404);
        return res.json({
            message: "Booking couldn't be found"
        });
    }
    if (req.user.id !== booking.userId) {
        res.status(403);
        return res.json({
            message: "Cannot change a booking owned by another user!", // (or "Validation error" if generated by Sequelize),
            errors: {
              username: "userId does not match booking ID"
            }
        });
    }
    await booking.destroy();
    return res.status(200).json({
        message: "Successfully deleted"
    });
});
module.exports = router;